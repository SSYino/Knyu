module.exports = async (command, msg, args, Interactions, client, fs) => {
    const db = JSON.parse(fs.readFileSync('./data/member-nicknames.json'));
    const afkJson = JSON.parse(fs.readFileSync('./data/isAfk.json'));
    const userId = msg.member.id;

    //User wants to set nickname.
    if (command === 'im') {
        let trueNickname = null;
        let alreadySent = false;
        let nickTooLong = false;
        let serversCanChangeNick = [];
        
        if (!args.length) {Interactions.reply('You did not provide a status.'); return};
        
        //Make loop through all client servers to see if user is in server
        const serverIdsArr = Object.keys(Object.fromEntries(client.guilds.cache));
        for (const id of serverIdsArr) {
            try {
                const guild = client.guilds.cache.get(id);
                const guildMembersMap = guild.members.cache;
                const member = guildMembersMap.get(userId);
                
                //Is member in server?
                if (!member) {return;}

                //Does User already have a nickname status?
                if (db[id].guildMembers[userId].useStatus) {
                    statusIndex = member.nickname.lastIndexOf('[');
                    trueNickname = member.nickname.substr(0, statusIndex);
                }
                
                const nickStatus = args.join(' ').toUpperCase()
                const currentNick = trueNickname ? trueNickname:
                member.nickname ? member.nickname:member.user.username;
                
                if (`${currentNick} [${nickStatus}]`.length > 32 || nickTooLong) {
                    Interactions.send("Display Name Length Cannot Exceed 32 Characters.");
                    nickTooLong = true;
                    for (const id of serverIdsArr) {
                        try {
                            console.log(serverIdsArr)
                            client.guilds.cache.get(id).members.cache.get(userId).useStatus = false;
                            console.log(client.guilds.cache.get(id).members.cache.get(userId));
                            delete client.guilds.cache.get(id).members.cache.get(userId).nickStatus;
                        } catch (err) {
                            console.error(err)
                        }
                    }
                    return;
                };
                const isUserInServer = guildMembersMap.findKey(member => {
                    return member.id === userId;
                })
                if (isUserInServer) {
                    serversCanChangeNick.push(id);
                    // db[id].guildMembers[userId].useStatus = true; 
                    // db[id].guildMembers[userId].nickStatus = args.join(' ');
                    // member.setNickname(`${currentNick} [${nickStatus}]`);
                }
                if (args[0] === 'afk' && alreadySent === false) {
                    console.log(`${msg.member.user.username} went AFK.`);
                    trueNickname ? null:console.log(`Updated UseStatus to true for ${msg.member.user.username}`);
                    alreadySent = true;
                }
                else if (alreadySent === false) {
                    //Un-afk user if user used command
                    if (afkJson[userId]) {
                        delete afkJson[userId];
                        console.log(`${msg.member.user.username} is no longer AFK.`)
                        fs.writeFile('./data/isAfk.json',JSON.stringify(afkJson,null,2), () => {console.log('Updated isAfk.json')})
                    }
                    const log = `Updated ${msg.member.user.username}'s Status to "${args.join(' ').toUpperCase()}"`;
                    Interactions.send(log)
                    console.log(log)
                    alreadySent = true;
                    trueNickname ? null:console.log(`Updated UseStatus to true for ${msg.member.user.username}`);
                }
            } catch (err){console.error(err)}
            
        }
        fs.writeFileSync('./data/member-nicknames.json',JSON.stringify(db,null,2))

        msg.delete().then(() => {}).catch(console.error);
    }

    //User wants to remove nickname
    else {
        if (!db[msg.guildId].guildMembers[userId].useStatus) {Interactions.send('You do not currently have a nickname status.'); return};

        const status = db[msg.guildId].guildMembers[userId].nickStatus;

        const serverIdsArr = Object.keys(Object.fromEntries(client.guilds.cache));
        serverIdsArr.forEach(id => {
            const guild = client.guilds.cache.get(id);
            const guildMembersMap = guild.members.cache;
            const member = guildMembersMap.get(userId);
            const isUserInServer = guildMembersMap.findKey(member => {
                return member.id === userId
            })
            if (isUserInServer) {
                member.setNickname(db[id].guildMembers[userId].nickname)
                db[id].guildMembers[userId].useStatus = false;
                delete db[id].guildMembers[userId].nickStatus;
            }
        });
        if (status === 'afk') {
            console.log(`${msg.member.user.username} is no longer AFK.`)
            if (afkJson[userId]) delete afkJson[userId];
            fs.writeFile('./data/isAfk.json',JSON.stringify(afkJson,null,2),() => {
                console.log('Updated isAfk.json')
            })
        }
        else Interactions.send(`Removed ${msg.member.displayName}'s nickname status.`)
        msg.delete().then(() => {}).catch(console.error);

        fs.writeFile('./data/member-nicknames.json',JSON.stringify(db,null,2),() => {
            console.log(`Updated UseStatus to false for ${msg.member.user.username}`)
            console.log(`${msg.member.user.username}'s nickname-status "${status}" was removed`)
            return;
        })
    }
}